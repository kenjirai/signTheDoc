{"version":3,"sources":["context/MainContext.js","context/MainProvider.js","context/SignInfoContext.js","context/SignInfoProvider.js","deployDoc/NextButton.js","utils/hashUnique.js","utils/helper.js","utils/getWeb3.js","utils/initWeb3.js","deployDoc/FileToHash.js","utils/validateForm.js","deployDoc/Checkbox.js","utils/getContextValues.js","deployDoc/SignerListForm.js","deployDoc/ExpiryDate.js","utils/getSignData.js","deployDoc/SignHash.js","deployDoc/VerifyAndDeploy.js","deployDoc/DeployDoc.js","shared/HashFile.js","utils/InputHashValid.js","shared/InputAndGetInfo.js","shared/DisplayInfo.js","signDoc/SignDoc.js","docInfo/DocInfo.js","deployDoc/Loading.js","deployDoc/Status.js","HomeApp.js","serviceWorker.js","index.js"],"names":["MainContext","React","createContext","MainProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateHashOutput","hashOutput","fileName","newState","objectSpread","loadWeb3","web3","contract","networkId","account","hashFile","nextBtn","value","disable","signHash","signData","r","s","v","docHash","signature","signerListForm","signerInfo","anyError","displayAddBtn","checkbox","name","firstLabel","secondLabel","values","expiryDate","selectedDate","unixDate","verifyAndDeploy","txHash","updaterFunction","state","setState","updateSignerListCheckBox","checkboxValues","slf","slFirstLabel","slSecondLabel","slFirstValue","slSecondValue","length","intializeForm","error","window","confirm","resetSignerListCheckBox","concat","toConsumableArray","address","openSig","resetExpiryDate","updateExpiryDate","updateSignerListForm","updateLoadWeb3","web3Data","updateSignHash","updateNextButton","toUpdate","reset","arguments","undefined","stateValue","Error","defineProperty","updateVerifyAndDeploy","vd","redirectToStatus","resetState","history","push","pathname","react_default","a","createElement","Provider","children","Component","Consumer","SignInfoContext","SignInfoProvider","updateUploadHash","uploadHash","inputHash","inputHashError","docData","creatorAddress","creationDate","authorisedSigners","whoSigned","signedAccount","updateInputHash","updateDocData","updateSignData","updateHashAndReset","SignInfoConsumer","NextButton","updateMainContext","context","btnDisable","onClick","disabled","_callee","hash","getDocData","regenerator_default","wrap","_context","prev","next","methods","from","sent","abrupt","stop","contextType","isHashUnique","hasKey","obj","key","hasOwnProperty","accessMsg","step","proceedMsg","makeSignerList","signerList","i","getWeb3","_ref","asyncToGenerator","mark","provider","_web","LoadProvider","_web2","_args","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","alert","apply","deployedNetwork","instance","_loadWeb","eth","net","getId","SignTheDoc","networks","Contract","abi","getCoinbase","_x","checkWeb3","_ref2","_callee2","_context2","_x2","FileToHash","progress","userConsent","event","file","target","files","handleChange","reader","FileReader","end","start","total","size","current","keccak256","self","assertThisInitialized","onload","update","result","asyncUpdate","e","progressInfo","toFixed","Math","min","readAsArrayBuffer","slice","hex","nextBtnValue","_this$context$loadWeb","unique","showProgress","deployDoc_NextButton","type","onChange","validateForm","signerAddress","trim","prefix","errorMsg","test","hasSpace","isAddressValid","isAddressUnique","utils","checkAddressChecksum","setRestFalse","setKey","handleInputChange","checkboxName","updateCheckBoxContext","data","updateFunction","firstValue","secondValue","checked","getCheckbox","label","loadName","hasError","arrObj","targetId","dataset","id","className","validate","checkBoxLogic","addAddress","deleteAddress","splice","handleSubmit","preventDefault","addNewBtn","signerListRender","_this2","_context$signerListFo","Checkbox","emptyErr","style","color","addressForm","onSubmit","map","val","idx","signerId","htmlFor","data-id","placeholder","ExpiryDate","date","inputDate","moment","toDate","unix","handleClick","showNext","dateField","showCheckbox","exFirstValue","exSecondValue","slNextBtn","currentDate","es","selected","showTimeSelect","timeFormat","timeIntervals","dateFormat","minDate","timeCaption","format","v_decimal","personal","sign","substr","toDecimal","getSignData","SignHash","currentAccount","showResult","VerifyAndDeploy","deploy","currentContext","_context$loadWeb","_context$signHash","diffInMinutes","finalExpDate","diff","createDocToSign","send","on","redirect","catch","renderHashOutput","renderAccount","renderSignature","renderSignerList","renderDate","blockMsg","expDate","exNextBtn","signer","index","toString","withRouter","DeployDoc","componentDidMount","deployDoc_FileToHash","deployDoc_SignHash","SignerListForm","deployDoc_ExpiryDate","deployDoc_VerifyAndDeploy","initState","HashFile","componentDidUpdate","prevProps","_this$state","updaterFunc","updateContextHashOutput","_this$state2","inputHashValid","isHashValid","InputAndGetInfo","hashStateKey","getData","trimValue","shared_HashFile","width","RenderDocInfo","keys","loadData","convertDate","loadDate","toNumber","signDoc","_this$context","allAccounts","diffDate","authList","currentHash","getAccounts","includes","deployClick","_callee3","_context3","signTheDoc","JSON","stringify","signProcess","_this$context2","shared_InputAndGetInfo","DocInfo","displayInfo","Loading","loadingMsg","loading","setInterval","clearInterval","getTxData","receipt","getTransactionReceipt","Status","network","getHash","location","getNetworkType","timer","then","networkLink","fullLink","showLoading","getNetwork","link","idToName","href","rel","deployDoc_Loading","react_router_dom","to","Home","HomeApp","MainProvider_MainProvider","SignInfoProvider_SignInfoProvider","exact","activeClassName","react_router","path","component","Boolean","hostname","match","ReactDOM","render","src_HomeApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c3a4c5c.chunk.js","sourcesContent":["import React from 'react';\n\nexport function initState() {\n  return {\n    loadWeb3: {\n      web3:null,\n      contract:null,\n      networkId:null,\n      account:null\n    },\n    hashFile: {\n      hashOutput: null,\n      nextBtn: {\n        value:false,\n        disable:false\n      }\n    },\n    signHash: {\n      account:null,\n      signData: {\n        r: null,\n        s: null,\n        v: null,\n        docHash: null,\n        signature: null\n      },\n      nextBtn: {\n        value:false,\n        disable:false\n      }\n    },\n    signerListForm: {\n      signerInfo: [],\n      anyError: true,\n      displayAddBtn: false,\n      checkbox: {\n        name: {\n          firstLabel: 'only authorize signer',\n          secondLabel: 'anyone can sign'\n        },\n        values: {}\n      },\n      nextBtn: {\n        value:false,\n        disable:false\n      }\n    },\n    expiryDate: {\n      selectedDate: null,\n      //default value is set to negative which \n      unixDate: null,\n      checkbox: {\n        name: {\n          firstLabel: 'yes',\n          secondLabel: 'no'\n        },\n        values: {}\n      },\n      nextBtn: {\n        value:false,\n        disable:false\n      }\n    },\n    verifyAndDeploy:{\n      txHash:''\n    }\n  }\n}\n\nexport const MainContext = React.createContext({});\n\n","import React from 'react';\nimport { initState, MainContext } from './MainContext';\n\n// Todo:\n// getCheckbox implementation.\n// import { getCheckbox } from '../utils/getContextValues';\n\nclass MainProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateHashOutput = (hashOutput, fileName) => {\n      let newState = {\n        ...initState(),\n        ...this.updaterFunction\n      };\n      newState.loadWeb3 = this.state.loadWeb3;\n      newState.hashFile.hashOutput = hashOutput;\n      newState.hashFile.fileName = fileName;\n      // newState.hashFile.nextBtn = false;\n      this.setState(newState);\n    };\n\n    this.updateSignerListCheckBox = (checkboxValues) => {\n\n       //signerListForm(slf)\n      let slf = this.state.signerListForm;\n\n      //Todo:\n      //Use getCheckBox\n      const signerInfo = slf.signerInfo;\n      const slFirstLabel = slf.checkbox.name.firstLabel;\n      const slSecondLabel = slf.checkbox.name.secondLabel;\n      const slFirstValue = checkboxValues[slFirstLabel];\n      const slSecondValue = checkboxValues[slSecondLabel];\n\n\n      if (slFirstValue && signerInfo.length === 0) {\n        // slf.checkbox.values = checkboxValues;\n        this.intializeForm(checkboxValues);\n      } else if (slSecondValue && signerInfo.length && !signerInfo[0].error) {\n        if (window.confirm('Warning: All entered address will be reset')) {\n          this.resetSignerListCheckBox(checkboxValues);\n        }\n      } else {\n        this.resetSignerListCheckBox(checkboxValues);\n      }\n    };\n\n    this.resetSignerListCheckBox = (checkboxValues) => {\n      let newState = {\n        ...initState(),\n        ...this.updaterFunction\n      };\n      //Load web3 state\n      newState.loadWeb3 = this.state.loadWeb3;\n      newState.hashFile = this.state.hashFile;\n      newState.signHash = this.state.signHash;\n      newState.signerListForm.checkbox.values = checkboxValues;\n\n      this.setState(newState);\n    };\n\n    this.intializeForm = (checkboxValues) => {\n      let newState = {\n        ...initState(),\n        ...this.updaterFunction\n      };\n      //Load web3 state\n      newState.loadWeb3 = this.state.loadWeb3;\n      newState.hashFile = this.state.hashFile;\n      newState.signHash = this.state.signHash;\n\n      newState.signerListForm.checkbox.values = checkboxValues;\n\n      /*\n      It is the initialization process of address input field.\n      During initialization process Add New Signer button is enabled and shown.\n      The state doesn't have any entry of signer address yet.\n      */\n\n      //Error key is set to true because empty address is consider invalid.\n      const newField = { address: '', error: true };\n\n      //Display first input field.\n      newState.signerListForm.signerInfo = [...newState.signerListForm.signerInfo, newField];\n\n      //Show Add New Signer button.\n      newState.signerListForm.displayAddBtn = true;\n      newState.signerListForm.openSig = false;\n\n      this.setState(newState)\n    }\n\n    //probably need to reset expiry date checkbox values;\n    //here\n    this.resetExpiryDate = (checkboxValues) => {\n      let newState = {\n        ...initState(),\n        ...this.updaterFunction\n      };\n      //Load web3 state\n      newState.loadWeb3 = this.state.loadWeb3;\n      newState.hashFile = this.state.hashFile;\n      newState.signHash = this.state.signHash;\n      newState.signerListForm = this.state.signerListForm;\n      newState.expiryDate.checkbox.values = checkboxValues;\n\n      this.setState(newState);\n    };\n\n    this.updateExpiryDate = (expiryDate) => {\n      this.setState({\n        expiryDate: expiryDate\n      });\n    };\n\n    this.updateSignerListForm = (signerListForm) => {\n      const signerInfo = this.state.signerListForm.signerInfo;\n\n      //When last remaining entered address is removed.\n      //SignerListForm checkbox value is restored to it's original state.\n      if (signerInfo.length === 0) {\n        const checkboxValues = {};\n        this.resetSignerListCheckBox(checkboxValues);\n      }\n\n      this.setState({\n        signerListForm: signerListForm\n      });\n    };\n\n    this.updateLoadWeb3 = (web3Data) => {\n      this.setState({ loadWeb3: web3Data });\n    };\n\n    this.updateSignHash = (signData, account) => {\n      const signHash = { ...this.state.signHash };\n      signHash.signData = signData;\n      signHash.account = account;\n      this.setState({ signHash });\n    }\n\n    this.updateNextButton = (toUpdate, reset = false) => {\n      let stateValue = this.state[toUpdate];\n\n      if (!stateValue) {\n        throw new Error(`${toUpdate} key doesn't exit in state`);\n      } else if (!reset) {\n        stateValue.nextBtn.value = true;\n        stateValue.nextBtn.disable = true;\n        this.setState({\n          [toUpdate]: stateValue\n        });\n      } else if (reset) {\n        stateValue.nextBtn.value = false;\n        stateValue.nextBtn.disable = false;\n      }\n    }\n\n    this.updateVerifyAndDeploy = (txHash) => {\n      //VerifyAndDeploy\n      let vd = { ...this.state.verifyAndDeploy };\n      vd.txHash = txHash;\n\n      //Reset state and only update VerifyAndDeploy state.\n      this.setState({\n        verifyAndDeploy: vd,\n      }, () => this.redirectToStatus());\n    }\n\n    this.resetState = () => {\n      const loadWeb3 = { ...this.state };\n      this.setState({\n        ...initState(),\n        loadWeb3: loadWeb3\n      });\n    }\n\n    this.updaterFunction = {\n      updateLoadWeb3: this.updateLoadWeb3,\n      updateHashOutput: this.updateHashOutput,\n      updateSignerListCheckBox: this.updateSignerListCheckBox,\n      resetExpiryDate: this.resetExpiryDate,\n      updateSignerListForm: this.updateSignerListForm,\n      updateExpiryDate: this.updateExpiryDate,\n      updateSignHash: this.updateSignHash,\n      updateNextButton: this.updateNextButton,\n      updateVerifyAndDeploy: this.updateVerifyAndDeploy,\n      resetState: this.resetState\n    }\n\n    this.state = {\n      ...initState(),\n      ...this.updaterFunction\n    };\n\n    this.redirectToStatus = () => {\n      const state = this.state;\n      const txHash = state.verifyAndDeploy.txHash;\n      const web3 = state.loadWeb3.web3;\n      this.props.history.push({\n        pathname: '/status',\n        txHash: txHash,\n        web3: web3\n      });\n    }\n  }\n  render() {\n    // console.log(\"+++++++Main State++++++++\", this.state);\n    return (\n      <div>\n        <MainContext.Provider value={this.state}>\n          {this.props.children}\n        </MainContext.Provider>\n      </div >\n    );\n  }\n}\n\nconst MainConsumer = MainContext.Consumer;\n\nexport { MainProvider, MainConsumer }\n\n","import React from 'react';\n\nexport function docDataState() {\n    return {\n        loadWeb3: {\n            web3:'',\n            contract:'',\n            account: '',\n            networkId:''\n        },\n        uploadHash:'',\n        inputHash: '',\n        inputHashError: '',\n        fileName: '',\n        docData: {\n            docHash: '',\n            creatorAddress: '',\n            expiryDate: '',\n            creationDate: '',\n            signature: '',\n            authorisedSigners: [],\n            whoSigned: []\n        },\n        signData: {\n            r: null,\n            s: null,\n            v: null,\n            docHash: null,\n            signature: null,\n            signedAccount:null\n          }\n    }\n}\n\nexport const SignInfoContext = React.createContext({});\n","import React from 'react';\nimport { docDataState, SignInfoContext } from './SignInfoContext';\n\nclass SignInfoProvider extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.updateLoadWeb3 = (web3Data) => {\n            this.setState({\n                loadWeb3: web3Data\n            });\n        }\n\n        // this.updateLoadWeb3 = (web3Data) => {\n        //     this.setState({\n        //         ...docDataState(),\n        //         loadWeb3: web3Data\n        //     });\n        // }\n\n\n        this.updateUploadHash = (hashOutput, fileName) => {\n            const { loadWeb3 } = this.state;\n            this.setState({\n                ...docDataState(),\n                loadWeb3: loadWeb3,\n                uploadHash: hashOutput,\n                fileName: fileName\n            });\n        }\n\n        this.updateInputHash = (hashOutput, error) => {\n            const { uploadHash } = this.state;\n            /*\n             Todo: \n             There is no point of updating inputHashError with empty string('') if \n             it's value is set to empty string already.\n\n             Break this function to make it simpler.\n            */\n            if(uploadHash && error) {\n                this.setState({\n                    ...docDataState(),\n                    inputHash:hashOutput,\n                    inputHashError:error\n                });\n            } else if (uploadHash && !error) {\n                this.setState({\n                    ...docDataState(),\n                    inputHash:hashOutput,\n                    inputHashError:''\n                });\n            } else if (!uploadHash && error) {\n                this.setState({\n                    inputHash:hashOutput,\n                    inputHashError:error\n                });\n            } else if(!uploadHash && !error) {\n                this.setState({\n                    inputHash:hashOutput,\n                    inputHashError:''\n                });\n            }\n        }\n\n        this.updateDocData = (docData) => {\n            this.setState({\n                docData: docData\n            });\n        }\n\n        this.resetState = () => {\n            let loadWeb3 = { ...this.state.loadWeb3 };\n            this.setState({\n                ...docDataState(),\n                loadWeb3: loadWeb3\n            });\n        }\n\n        this.updateSignData = (signData) => {\n            this.setState({\n                signData:signData\n            });\n        }\n\n        this.updaterFunction = {\n            updateLoadWeb3: this.updateLoadWeb3,\n            updateInputHash: this.updateInputHash,\n            updateUploadHash: this.updateUploadHash,\n            updateDocData: this.updateDocData,\n            updateHashAndReset: this.updateHashAndReset,\n            updateSignData: this.updateSignData,\n            resetState:this.resetState\n        }\n        this.state = {\n            ...docDataState(),\n            ...this.updaterFunction\n        };\n    }\n\n    render() {\n        // console.log(\"+++++++SignInfo state++++++++\", this.state);\n        return (\n            <div>\n                <SignInfoContext.Provider value={this.state}>\n                    {this.props.children}\n                </SignInfoContext.Provider>\n            </div >\n        );\n    }\n}\n\nconst SignInfoConsumer = SignInfoContext.Consumer;\n\nexport { SignInfoProvider, SignInfoConsumer }","import React from 'react';\nimport { MainContext } from '../context/MainContext';\n\nclass NextButton extends React.Component {\n\n    updateMainContext = () => {\n        const context = this.context;\n        const toUpdate = this.props.toUpdate;\n        context.updateNextButton(toUpdate);\n    }\n\n    render() {\n        const toUpdate = this.props.toUpdate;\n        const btnDisable = this.context[toUpdate].nextBtn.disable;\n        return (\n            <div>\n                <button onClick={this.updateMainContext} disabled={btnDisable}>Next>></button>\n            </div>\n        );\n    }\n}\n\nexport default NextButton;\n\nNextButton.contextType = MainContext;\n","async function isHashUnique(contract, account, hash) {\n\n    const getDocData = await contract.methods.getDocData(hash)\n        .call({ from: account });\n\n    if (getDocData && getDocData.docHash === hash) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nexport default isHashUnique;\n\n","import React from 'react';\n\nexport const failWeb3Msg = \"Web3 account not detected, Please install/Login to       MetaMask and try again.\";\n\nexport function hasKey(obj, key) {\n  if (obj.hasOwnProperty(key))\n    return true;\n  return false;\n}\n\nexport function accessMsg(step) {\n  return (\n    <div>\n      <p> Complete Step:{step} to access this content.</p>\n    </div>\n  );\n}\n\nexport function proceedMsg(step) {\n  return (\n    <div>\n      <p><i>Click Next to proceed to {step} below.</i></p>\n    </div>\n  );\n}\n\nexport function isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop))\n      return false;\n  }\n  return true;\n}\n\nexport function makeSignerList(signerInfo) {\n  let signerList = [];\n  for (let i = 0; i < signerInfo.length; i++) {\n    if (!signerInfo[i].error && signerInfo[i].address.length > 0) {\n      signerList.push(signerInfo[i].address);\n    };\n  }\n  return signerList;\n}\n\n\n","import Web3 from \"web3\";\nimport { failWeb3Msg } from './helper';\n\nconst getWeb3 = async (provider = null) => {\n\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n    try {\n      // Request account access if needed\n      await window.ethereum.enable()\n      // Acccounts now exposed\n      return (web3);\n    } catch (error) {\n      console.log(error);\n      return (error);\n    }\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    // Use Mist/MetaMask's provider.\n    const web3 = window.web3;\n    //console.log(\"Injected web3 detected.\");\n    return (web3);\n  }\n  // Fallback to localhost provider if provided.\n  else if (provider) {\n    const LoadProvider = new Web3.providers.HttpProvider(\n      provider\n    );\n    const web3 = new Web3(LoadProvider);\n    return (web3);\n  } else {\n    return alert(failWeb3Msg)\n  }\n}\n\nexport default getWeb3;\n","import SignTheDoc from \"../contracts/SignTheDoc.json\";\nimport getWeb3 from \"../utils/getWeb3\";\n\nexport const loadWeb3 = async (updateLoadWeb3) => {\n    try {\n        const web3 = await getWeb3();\n\n        if(!web3) {\n            return console.log('MetaMask not detected')\n        }\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SignTheDoc.networks[networkId];\n        const instance = new web3.eth.Contract(\n            SignTheDoc.abi,\n            deployedNetwork && deployedNetwork.address,\n        );\n\n        const account = await web3.eth.getCoinbase();\n\n        let loadWeb3 = {};\n\n        loadWeb3.web3 = web3;\n        loadWeb3.networkId = networkId;\n        loadWeb3.deployedNetwork = deployedNetwork;\n        loadWeb3.contract = instance;\n        loadWeb3.account = account;\n\n        updateLoadWeb3(loadWeb3);\n\n        return true;\n\n    } catch (e) {\n        return e\n    }\n}\n\nexport const checkWeb3 = async (context) => {\n    if ((typeof window.ethereum == 'undefined') || (typeof window.web3 !== 'undefined')) {\n        return await loadWeb3(context.updateLoadWeb3);\n    }\n\n    let web3 = context.loadWeb3.web3;\n    let contract = context.loadWeb3.contract;\n    let account = context.loadWeb3.account;\n    \n    if (!web3 || !contract || !account) {\n       return await loadWeb3(context.updateLoadWeb3);\n    }\n\n    return true;\n}\n","import React from \"react\";\nimport { keccak256 } from 'js-sha3';\nimport { MainContext } from '../context/MainContext';\nimport NextButton from \"./NextButton\";\nimport isHashUnique from '../utils/hashUnique';\nimport { checkWeb3 } from '../utils/initWeb3';\nimport { proceedMsg } from '../utils/helper';\n\nclass FileToHash extends React.Component {\n  state = {\n    progress: ''\n  }\n  \n  userConsent = (event) => {\n    const context = this.context;\n    const { hashOutput } = context.hashFile;\n\n    const file = event.target.files[0];\n\n    if (hashOutput && file) {\n      if (window.confirm('Warning: All entered data will be reset')) {\n        this.handleChange(event);\n      }\n    } else if (!hashOutput) {\n      this.handleChange(event);\n    }\n  }\n\n  handleChange = (event) => {\n    let reader = new FileReader();\n    const file = event.target.files[0];\n\n    if (!file) {\n      return alert('Please select at least one file.')\n    }\n\n    const batch = 1024 * 1024 * 2;\n    let start = 0;\n    let fileName = file.name;\n    const total = file.size;\n    let current = keccak256;\n    const self = this;\n\n    let end;\n\n    reader.onload = function (event) {\n      try {\n        current = current.update(event.target.result);\n        asyncUpdate();\n      } catch (e) {\n        console.log('error', e)\n      }\n    };\n\n    var asyncUpdate = function () {\n      if (total === 0) {\n        return alert(\"Current uploaded file is empty.File size needs to be greater than 0 byte\");\n      } else if (start < total && total > 0) {\n        let progressInfo = `hashing...${(start / total * 100).toFixed(2)} %`;\n        self.setState({\n          progress: progressInfo\n        });\n        end = Math.min(start + batch, total);\n        reader.readAsArrayBuffer(file.slice(start, end));\n        start = end;\n      } else {\n        const hashOutput = '0x' + current.hex();\n        self.setState({\n          progress: '100%'\n        }, () => self.updateMainContext(hashOutput, fileName, null));\n      }\n    };\n    asyncUpdate();\n  }\n\n  updateMainContext = async (hashOutput, fileName, nextBtnValue) => {\n    await checkWeb3(this.context);\n\n    const { web3, contract, account } = this.context.loadWeb3;\n\n    if(!web3) {\n      return console.log('MetaMask not detected');\n    }\n\n    try {\n      const unique = await isHashUnique(contract, account, hashOutput);\n      \n      if(!unique) {\n        return alert(`Current file Hash already exist on the network.Someone has already deployed hash of this file.Hash must be unique.Please choose different file or modifiy the content of the file slightly to produce different hash and try again.`);\n      }\n\n      if (unique) {\n        this.context.updateHashOutput(hashOutput, fileName, nextBtnValue);\n      }\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    const complete = '100%';\n    const hashOutput = this.context.hashFile.hashOutput;\n\n    let progress = this.state.progress;\n    let showProgress;\n\n    if (progress && progress !== complete) {\n      showProgress = (\n        <div>\n          <p>Progress: {this.state.progress}</p>\n        </div>\n      );\n    } else if ((progress === complete) && hashOutput) {\n      showProgress = (\n        <div>\n          <p>Progress: {this.state.progress}</p>\n          <p><strong>Hash generated: {hashOutput}></strong></p>\n          {proceedMsg('Step2')}\n          <NextButton toUpdate=\"hashFile\" />\n        </div>\n      );\n    } else {\n      progress = null;\n    }\n\n    return (\n      <div>\n        <form>\n          <label>\n            Select a File:\n          <input type=\"file\" onChange={this.userConsent}\n              onClick={(event) => {\n                event.target.value = null\n              }} />\n          </label>\n        </form>\n        <div>\n          {showProgress}\n        </div>\n      </div>\n    );\n  }\n}\n\nFileToHash.contextType = MainContext;\nexport default FileToHash;\n","\nfunction isAddressValid(address) {\n  const myRe = /^0x[a-fA-F0-9]{40}$/;\n  if(myRe.test(address)) {\n      return true;\n  } else {\n      return false;\n  }\n}\n\nfunction hasSpace(address){\n  const myRe = /\\s/g;\n  if(myRe.test(address)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isAddressUnique(signerInfo, address) {\n  for(let i=0; i < signerInfo.length; i++) {\n    if (signerInfo[i].address === address) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateForm(web3, address, state) {\n  //remove any first and last space\n  const signerAddress= address.trim();\n  const prefix = signerAddress.slice(0,2);\n\n  if(address.length === 0) {\n    return {\n      errorMsg:'',\n      anyError: true\n    };\n  } else if( prefix !== \"0x\") {\n    return {\n      errorMsg:'address must start with 0x prefix.',\n      anyError: true\n    };\n  } else if(hasSpace(signerAddress)) {\n    return {\n      errorMsg:'address should not contain any space character.',\n      anyError:true\n    };\n  } else if(address.length !== 42) {\n    return {\n      errorMsg:'address length should be 42 including 0x prefix at the front.',\n      anyError:true\n    };\n  } else if(!isAddressValid(signerAddress)) {\n    return {\n      errorMsg:'address should be in correct hex format.',\n      anyError:true\n    };\n  } else if(state.length > 1) {\n      if(!isAddressUnique(state, signerAddress)) {\n        return {\n          errorMsg:`duplicate address ${signerAddress} already exist.`,\n          anyError:true\n        };\n      } else {\n        return {\n          errorMsg:false,\n          anyError:false\n        };\n      }\n  } else if(!web3.utils.checkAddressChecksum(address)) {\n    return {\n      errorMsg:'Invalid checksum',\n      anyError: true\n    };\n  } else {\n    return {\n      errorMsg:false,\n      anyError:false\n    };\n  }\n}\n\nexport default validateForm;\n","import React from 'react';\nimport { MainContext } from '../context/MainContext';\n\nfunction hasKey(obj, key) {\n    if (obj.hasOwnProperty(key))\n      return true;\n  return false;\n}\n\nfunction setRestFalse(obj, setKey) {\n  for (var key in obj) {\n    if (key !== setKey) {\n      obj[key] = false\n    }\n  }\n  return obj;\n}\n\nclass checkbox extends React.Component {\n\n    handleInputChange = (event) => {\n      const context = this.context;\n      //Replace the content here\n      const checkboxName = this.props.checkboxName;\n      let checkbox = {...context[checkboxName].checkbox.values};\n      const name = event.target.name;\n\n      let newState;\n\n      if (!checkbox){\n        newState = {\n          [name]: true\n        }\n        this.updateCheckBoxContext(newState);\n      } else if (!hasKey(checkbox, name)) {\n        checkbox[name] = true;\n        newState = setRestFalse(checkbox, name);\n        this.updateCheckBoxContext(newState);\n      } else if (!checkbox[name]) {\n        checkbox[name] = true;\n        newState = setRestFalse(checkbox, name);\n        this.updateCheckBoxContext(newState);\n      }\n    }\n\n  updateCheckBoxContext = (data) => {\n    const context = this.context;\n    const updateFunction = this.props.updateFunction;\n    context[updateFunction](data);\n  }\n\n  render() {\n    //Receive function through props from Context Provider to update Main Context State\n    const checkboxName = this.props.checkboxName;\n    const checkbox = this.context[checkboxName].checkbox;\n\n    //Get checkbox label name.\n    const firstLabel =  checkbox.name.firstLabel;\n    const secondLabel = checkbox.name.secondLabel;\n\n    //Store checkbox respective value.\n    let firstValue = checkbox.values[firstLabel];\n    let secondValue = checkbox.values[secondLabel];\n\n    return (\n      <div>\n         <form>\n        <label>\n          {firstLabel}\n          <input\n            name={firstLabel}\n            type=\"checkbox\"\n            checked={firstValue? firstValue:false}\n            onChange={this.handleInputChange} />\n        </label>\n        <br/>\n        <label>\n          {secondLabel}\n          <input\n            name={secondLabel}\n            type=\"checkbox\"\n            checked={secondValue? secondValue:false}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n      </form>\n      </div>\n    );\n  }\n}\n\ncheckbox.contextType = MainContext;\n\nexport default checkbox;\n","import { hasKey } from './helper';\n\nexport function getCheckbox(context, key, label) {\n    if(hasKey(context, key)) {\n        const chkBoxNames = context[key].checkbox.name;\n        if(hasKey(chkBoxNames, label)){\n            const loadName = context[key].checkbox.name[label]\n            const chkBoxVal = context[key].checkbox.values[loadName]\n            return chkBoxVal;\n        } else {\n            throw new Error(`${label} key not found`);\n        }\n    } else {\n        throw new Error(`${key} not found`)\n    }\n}\n\n","import React from \"react\";\nimport { MainContext } from '../context/MainContext';\nimport validateForm from '../utils/validateForm';\nimport { accessMsg } from '../utils/helper';\nimport Checkbox from './Checkbox';\nimport NextButton from './NextButton';\nimport { getCheckbox } from '../utils/getContextValues';\n\n//Signer address Information is stored as object inside array.\n//Object contains two keys, address and error. e.g {address:'0x23...', error:true}\n//error key is set to true/false during address form validation.\nfunction hasError(arrObj) {\n  const length = arrObj.length;\n  let hasError;\n  if (length) {\n    for (let i = 0; i < length; i++) {\n      if (arrObj[i].error === true) {\n        hasError = true;\n        return hasError;\n      }\n    }\n  }\n  hasError = false;\n  return hasError;\n}\n\nclass signerListForm extends React.Component {\n\n  handleChange = (e) => {\n    const context = this.context;\n    const { web3 } = context.loadWeb3;\n    let slf = { ...context.signerListForm };\n    const targetId = e.target.dataset.id;\n\n    //form className is 'address'\n    const className = e.target.className;\n    const error = 'error';\n    const address = e.target.value;\n    const validate = validateForm(web3, address, slf.signerInfo);\n    slf.signerInfo[targetId][className] = address.trim();\n    slf.signerInfo[targetId][error] = validate.errorMsg;\n    slf.anyError = validate.anyError;\n    slf.nextBtn.value = false;\n    slf.nextBtn.disable = false;\n    this.updateMainContext(slf);\n  }\n\n  updateMainContext = (data) => {\n    const context = this.context;\n    context.updateSignerListForm(data);\n  }\n\n  checkBoxLogic = () => {\n\n    const context = this.context;\n\n    const slFirstValue = getCheckbox(context, 'signerListForm', 'firstLabel')\n    // const slFirstLabel = slf.checkbox.name.firstLabel;\n    // const slFirstValue = slf.checkbox.values[slFirstLabel];\n\n    //signerListForm(slf)\n    let slf = { ...context.signerListForm };\n\n    if (slFirstValue && slf.signerInfo.length === 0) {\n\n      //Form initialization process.\n      //Error key is set to true because empty address is consider invalid.\n      const newField = { address: '', error: true };\n\n      //Display first input field.\n      slf.signerInfo = [...slf.signerInfo, newField];\n\n      //Show Add New Signer button.\n      slf.displayAddBtn = true;\n      slf.openSig = false;\n      this.updateMainContext(slf);\n    }\n  }\n\n  addAddress = (e) => {\n    //SignerListForm(slf)\n    let slf = { ...this.context.signerListForm };\n    //Disable Add New Button.\n    //It will be set to false if entered address is valid.\n    slf.anyError = true;\n    slf.nextBtn.value = false;\n    slf.nextBtn.disable = false;\n\n    const newField = { address: '', error: true };\n    slf.signerInfo = [...slf.signerInfo, newField];\n\n    this.updateMainContext(slf);\n  }\n\n  //Delete button logic\n  deleteAddress = (e) => {\n    let context = this.context;\n    let signerListForm = { ...context.signerListForm }\n    let signerInfo = [...signerListForm.signerInfo];\n    signerInfo.splice(e.target.dataset.id, 1);\n    signerListForm.signerInfo = signerInfo;\n\n    //This conidition will execute if the user delete the last remaining address by pressing delete button.\n    if (signerInfo.length === 0) {\n      //Hide Add New Signer button.\n      signerListForm.displayAddBtn = false;\n\n      //Disable Add New Signer button.\n      signerListForm.anyError = true;\n\n      //Reset SignerListForm checkbox values.\n      signerListForm.checkbox.values = {};\n\n      this.updateMainContext(signerListForm);\n\n    } else {\n      const errorExist = hasError(signerInfo);\n      if (!errorExist) {\n        signerListForm.anyError = false;\n      }\n      this.updateMainContext(signerListForm);\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n  }\n\n  render() {\n    const context = this.context;\n    const slSecondValue = getCheckbox(context, 'signerListForm', 'secondLabel')\n    let { signerInfo, anyError, displayAddBtn } = context.signerListForm\n    let addNewBtn;\n    let nextBtn;\n    let proceedMsg;\n\n    if (displayAddBtn) {\n      addNewBtn = <button id=\"add-new-btn\" onClick={this.addAddress} disabled={anyError}>Add new signer</button>\n    } else {\n      addNewBtn = null;\n    }\n\n    if (slSecondValue) {\n      proceedMsg = 'Proceed to Step4 below.';\n    } else {\n      proceedMsg = null;\n    }\n\n    //Show/Hide confirm button.\n    if (signerInfo.length > 0 && !hasError(signerInfo)) {\n      nextBtn = (\n        <div>\n          <p>Continue updating address or Click Next to proceed to Step4 below.</p>\n          <NextButton toUpdate='signerListForm' />\n        </div>\n      )\n    } else {\n      nextBtn = null;\n    }\n\n    const signHashNxtBtn = context.signHash.nextBtn;\n\n    let signerListRender;\n    if (signHashNxtBtn.value) {\n      signerListRender = (\n        <div>\n          <Checkbox checkboxName='signerListForm' updateFunction='updateSignerListCheckBox' />\n          <br />\n        </div>\n      );\n    } else {\n      signerListRender = accessMsg('2');\n    }\n\n    const emptyErr = (\n      <span style={{ color: \"red\" }}>Address field should not be empty, please delete or enter correct address</span>\n    );\n\n    const addressForm = (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {\n            signerInfo.map((val, idx) => {\n              const signerId = `signer-${idx}`;\n              return (\n                <div key={idx}>\n                  <label htmlFor={signerId}>{`signer #${idx + 1}`}</label>\n                  <input\n                    type=\"text\"\n                    name={signerId}\n                    data-id={idx}\n                    id={signerId}\n                    placeholder=\"ethereum address\"\n                    value={signerInfo[idx].address}\n                    className=\"address\"\n                    onChange={this.handleChange}\n                  />\n                  {signerInfo.length >= 0 ? (\n                    <button data-id={idx} id={`btn-${signerId}`} className='del-btn' onClick={this.deleteAddress} >Delete</button>\n                  ) : (\n                      null\n                    )}\n                  <br />\n                  <span id={`error-${idx}`} style={{ color: \"red\" }}>{signerInfo[idx].error}</span>\n                  {signerInfo[idx].address.length === 0 ? emptyErr : null}\n                </div>\n              );\n            })\n          }\n        </form>\n        <div id=\"add-new-btn\">\n          {addNewBtn}\n        </div>\n        <div>\n        </div>\n      </div>\n    )\n    return (\n      <div>\n        {signerListRender}\n        {addressForm}\n        {nextBtn}\n        {proceedMsg}\n      </div>\n    );\n  }\n}\n\nsignerListForm.contextType = MainContext;\n\nexport default signerListForm;\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { MainContext } from '../context/MainContext';\nimport moment from 'moment';\nimport Checkbox from './Checkbox';\nimport { accessMsg, proceedMsg } from '../utils/helper';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport NextButton from \"./NextButton\";\n\nimport { getCheckbox } from '../utils/getContextValues';\n\nclass ExpiryDate extends React.Component {\n  handleChange = (date) => {\n    const context = this.context;\n    var inputDate = moment(date);\n    let expiryDate = { ...context.expiryDate };\n    expiryDate.selectedDate = inputDate.toDate();\n    expiryDate.unixDate = moment(date).unix();\n    context.updateExpiryDate(expiryDate);\n  }\n\n  handleClick = () => {\n    const context = this.context;\n    const { expiryDate } = context;\n    context.updateExpiryDate(expiryDate);\n  }\n\n  render() {\n    //Expiry date checkbox values.\n    const context = this.context\n    const { expiryDate } = this.context;\n   \n    //Expiry Date CheckBox label 'yes' of expiryDate checkbox\n    const exFirstValue = getCheckbox(context, 'expiryDate', 'firstLabel');\n    //Expiry DAte Checkbox label 'no' of expiryDate checkbox.\n    const exSecondValue = getCheckbox(context, 'expiryDate', 'secondLabel');\n\n    const slSecondValue = getCheckbox(context, 'signerListForm', 'secondLabel');\n    \n    //SignerList checkbox values.\n    const slf = this.context.signerListForm;\n\n    const slNextBtn = slf.nextBtn.value;\n\n    let selectedDate;\n    let showNext;\n    let dateField;\n    let showCheckbox;\n    let currentDate = moment().toDate();\n   \n    if (slSecondValue || slNextBtn) {\n      showCheckbox = (\n        <div>\n          <Checkbox checkboxName='expiryDate' updateFunction='resetExpiryDate' />\n        </div>\n      );\n    } else {\n      showCheckbox = accessMsg('3');\n    }\n  \n    //Update the DatePicker field with selected date.\n    //Initial date with be current date.\n    if (expiryDate.selectedDate) {\n      selectedDate = expiryDate.selectedDate;\n    } else {\n      selectedDate = moment().toDate();\n    }\n\n    //When ExpiryDate component checkboxy label 'yes' is selected.\n    if (exFirstValue) {\n      dateField = (\n        <div>\n          <DatePicker\n            selected={selectedDate}\n            onChange={this.handleChange}\n            showTimeSelect\n            timeFormat=\"h:mm\"\n            timeIntervals={15}\n            dateFormat=\"d/MM/yyyy h:mm aa\"\n            minDate={currentDate}\n            timeCaption=\"time\"\n          />\n        </div>\n      );\n    } else {\n      dateField = null;\n    }\n\n    //Entered date is converted to unix time stamp and recorded into the contract.\n    const nextBtn = <NextButton toUpdate='expiryDate' />\n    if (expiryDate.unixDate && exFirstValue) {\n      const expiryDate = moment(selectedDate).format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n      showNext = (\n        <div>\n          <p>Expiry Date: <strong>{expiryDate}</strong></p>\n          <p>Unix timestamp: <strong>{expiryDate.unixDate}</strong></p>\n            {proceedMsg('Step4')}\n           {nextBtn}\n        </div>\n      );\n    } else if(exSecondValue) {\n      showNext = (\n        <div>\n          {proceedMsg('Step4')}\n          {nextBtn}\n        </div>\n      );\n    }\n    return (\n      <div>\n        {showCheckbox}\n        {dateField}\n        {showNext}\n      </div >\n    );\n  }\n}\n\nExpiryDate.contextType = MainContext;\n\nexport default ExpiryDate;\n","async function getSignData(web3, docHash, account) {\n  var signature = await web3.eth.personal.sign(docHash, account, null);\n\n  //Remove 0x prefix\n  signature = signature.substr(2);\n  const r = '0x' + signature.slice(0, 64)\n  const s = '0x' + signature.slice(64, 128)\n  const v = '0x' + signature.slice(128, 130)\n  var v_decimal = web3.utils.toDecimal(v)\n\n  //add 0x prefix\n  signature = '0x' + signature;\n\n  if (v_decimal < 27) {\n    v_decimal += 27;\n  }\n\n  if (v_decimal !== 27 && v_decimal !== 28) {\n    return {\n      error: new Error('V should be either 27 or 28')\n    }\n  }\n\n  return {\n    r: r,\n    s: s,\n    v: v_decimal,\n    docHash: docHash,\n    signature: signature\n  }\n}\n\nexport default getSignData;\n","import React from \"react\";\nimport getSignData from '../utils/getSignData';\nimport { MainContext } from \"../context/MainContext.js\";\nimport { accessMsg, proceedMsg } from '../utils/helper';\nimport { checkWeb3 } from '../utils/initWeb3';\n\nimport NextButton from './NextButton';\n\nclass SignHash extends React.Component {\n\n  handleClick = async (e) => {\n    \n    await checkWeb3(this.context);\n    const { web3 } = this.context.loadWeb3;\n    if(!web3) {\n      return console.log('MetaMask not detected');\n    }\n\n    const hashOutput = this.context.hashFile.hashOutput;\n    if (!hashOutput) {\n      return alert('Please visit step:1 and choose the file');\n    }\n\n    const currentAccount = await web3.eth.getCoinbase();\n  \n    const signData = await getSignData(web3, hashOutput, currentAccount);\n\n    if (!signData.signature) {\n      return alert('Please follow the instruction carefully');\n    }\n\n    this.context.updateSignHash(signData, currentAccount);\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n  }\n\n  render() {\n    const context = this.context;\n    const signature = context.signHash.signData.signature;\n    const fileName = context.hashFile.fileName;\n\n    const hashFile = context.hashFile;\n\n    let signHash;\n    let showResult;\n\n    if (signature) {\n      showResult = (\n        <div>\n          <p>SignedData: {hashFile.hashOutput}</p>\n          <p>Signature: <strong>{signature}</strong></p>\n          <p><i>Signing Process Success:</i></p>\n          {proceedMsg('Step3')}\n          <NextButton toUpdate=\"signHash\" />\n        </div>\n      );\n    } else {\n      showResult = null;\n    }\n\n    if (hashFile.nextBtn.value && !signature) {\n      signHash = (\n        <div>\n          <p><strong>Click sign</strong> below to sign the calculated hash of the file name: <strong>{fileName}</strong></p>\n          <p>Calculated Hash:<strong>{hashFile.hashOutput}</strong></p>\n          <div>\n            <button id='sign-hash' onClick={this.handleClick}> Sign </button>\n          </div>\n        </div>\n      );\n    } else if (!hashFile.nextBtn.value && !signature) {\n      signHash = accessMsg('1');\n    }\n    return (\n      <div>\n        {signHash}\n        {showResult}\n      </div>\n    );\n  }\n}\n\nSignHash.contextType = MainContext;\nexport default SignHash;\n","import React from 'react';\n\nimport { MainContext } from '../context/MainContext';\nimport { makeSignerList } from '../utils/helper';\nimport { checkWeb3 } from '../utils/initWeb3';\nimport { accessMsg } from '../utils/helper';\nimport { withRouter } from 'react-router-dom';\nimport { getCheckbox } from '../utils/getContextValues';\n\nimport moment from 'moment'\n\nclass VerifyAndDeploy extends React.Component {\n\n  deploy = async () => {\n\n    //This context is used for check purpose only during web3 initialization.\n    const currentContext = this.context;\n\n    await checkWeb3(currentContext);\n\n    //loading updated new context context\n    const context = this.context;\n    const { web3, contract, networkId } = context.loadWeb3;\n\n    if (!web3) {\n      return console.log('MetaMask not detected');\n    }\n\n    const { account, signData } = context.signHash;\n\n    const { signerInfo } = context.signerListForm;\n    const signerList = makeSignerList(signerInfo);\n\n    const expiryDate = context.expiryDate;\n    const exFirstValue = getCheckbox(context, 'expiryDate', 'firstLabel');\n    const exSecondValue = getCheckbox(context, 'expiryDate', 'secondLabel');\n\n    if (exFirstValue) {\n      const currentDate = moment().toDate();\n      const selectedDate = moment(expiryDate.selectedDate);\n      const diffInMinutes = selectedDate.diff(currentDate, 'minutes');\n\n      if (diffInMinutes < 5 && diffInMinutes > 0) {\n        alert('Document should be atleast open for 5 minutes. Please choose longer expiry date`');\n        context.resetExpiryDate({});\n        return;\n      } else if (diffInMinutes <= 0) {\n        alert('Provided expiry date is less then current date. Plese choose longer expiry date.');\n        context.resetExpiryDate({});\n        return;\n      }\n    }\n\n    const deployAccount = await web3.eth.getCoinbase();\n\n    //Account used for deployment of this contract must be same for the account used for signing \n    //the hash of the file.\n\n    if (deployAccount !== account) {\n      const wrongAccMsg = `Account used for signing the document and deployment of this contract should be same.\\\n      This issue is probably caused by switching to different account at Metamask. Press Ok to re sign the document or press cancel to reselect the account`;\n      if (window.confirm(wrongAccMsg)) {\n        //Send to step1: to re sign the document.\n        return context.updateHashOutput(context.hashFile.hashOutput);\n      } else {\n        return;\n      }\n    }\n\n    let finalExpDate;\n    if (exSecondValue) {\n      finalExpDate = 0;\n    } else {\n      finalExpDate = expiryDate.unixDate;\n    }\n\n    contract.methods.createDocToSign(\n      finalExpDate,\n      signData.signature,\n      signerList,\n      signData.docHash,\n      signData.r,\n      signData.s,\n      signData.v\n    ).send({ from: account })\n      .on('transactionHash', (hash) => {\n        this.props.history.push({\n          pathname: '/status',\n          web3: web3,\n          hash: hash,\n          networkId: networkId,\n          redirect: true\n        });\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    // //Expiry date checkbox values.\n    const context = this.context;\n\n    const exFirstValue = getCheckbox(context, 'expiryDate', 'firstLabel');\n\n    const slFirstValue = getCheckbox(context, 'signerListForm', 'firstLabel');\n    const slSecondValue = getCheckbox(context, 'signerListForm', 'secondLabel');\n\n    const expDate = context.expiryDate;\n    const exNextBtn = context.expiryDate.nextBtn.value;\n\n    let renderHashOutput\n    let renderAccount;\n    let renderSignature;\n    let renderSignerList;\n    let renderDate;\n    let deploy;\n    let blockMsg;\n    // let accessMsg;\n\n    if (!exNextBtn) {\n      blockMsg = accessMsg(4);\n    } else if (exNextBtn) {\n      blockMsg = null;\n\n      const hashOutput = context.hashFile.hashOutput;\n      if (hashOutput) {\n        renderHashOutput = (\n          <section>\n            <h4>Hash Output:</h4>\n            {hashOutput}\n          </section>\n        );\n      }\n\n      const account = context.signHash.account;\n      if (account) {\n        renderAccount = (\n          <section>\n            <h4>Account:</h4>\n            {account}\n          </section>\n        );\n      }\n\n      const signature = context.signHash.signData.signature;\n      if (signature) {\n        renderSignature = (\n          <section>\n            <h4>Signature:</h4>\n            {signature}\n          </section>\n        );\n      }\n\n      const signerInfo = context.signerListForm.signerInfo;\n      if (signerInfo.length > 0 && slFirstValue) {\n        renderSignerList = (\n          <section>\n            <h4>Mode: Only authorize signer can sign the document.</h4>\n            <h4>List of Authorized Signers</h4>\n            <ul>\n              {signerInfo.map((signer, index) => {\n                return (\n                  <li key={index.toString()}>{signer.address}</li>\n                )\n              })\n              }\n            </ul>\n          </section>\n        );\n      } else if (slSecondValue) {\n        renderSignerList = (\n          <section>\n            <h4>Mode: Anyone can sign the document.</h4>\n          </section>\n        );\n      } else {\n        renderSignerList = null;\n      }\n\n      //Expiry date checkbox label 'yes' is selected to include date.\n      if (exFirstValue && expDate) {\n        const selectedDate = context.expiryDate.selectedDate;\n        const dateFormat = moment(selectedDate).format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n\n        renderDate = (\n          <section>\n            <article>\n              <h4>Expiry date:</h4>\n              <p>{dateFormat}</p>\n            </article>\n\n            <article>\n              <h4>Unix timestamp:</h4>\n              <p>{context.expiryDate.unixDate}</p>\n            </article>\n          </section>\n        )\n      } else {\n        renderDate = null;\n      }\n\n      deploy = (\n        <div>\n          <button onClick={this.deploy}>Deploy</button>\n        </div>\n      );\n    }\n    return (\n      <div>\n        {blockMsg}\n        {renderHashOutput}\n        {renderAccount}\n        {renderSignature}\n        {renderSignerList}\n        {renderDate}\n        {deploy}\n      </div>\n    );\n  }\n}\n\nVerifyAndDeploy.contextType = MainContext;\n\n//Create Array \nexport default withRouter(VerifyAndDeploy);","import React from 'react';\nimport { MainContext } from '../context/MainContext';\nimport FileToHash from './FileToHash';\nimport SignerListForm from './SignerListForm';\nimport ExpiryDate from './ExpiryDate';\nimport SignHash from './SignHash';\nimport VerifyAndDeploy from './VerifyAndDeploy';\nimport { checkWeb3 } from '../utils/initWeb3';\n\nclass DeployDoc extends React.Component {\n\n  componentDidMount = async () => {\n    this.context.resetState();\n    await checkWeb3(this.context);\n  }\n    \n  render() {\n    return (\n      <div>\n          <section>\n            <h3>Step1: Hash The File </h3>\n            <FileToHash />\n          </section>\n          <section>\n            <h3>Step2: Signing process</h3>\n            <SignHash />\n          </section>\n          <section>\n            <h3>Step3: Who can sign the document? </h3>\n            <SignerListForm />\n          </section>\n          <section>\n            <h3>Step4: Include expiry Date? </h3>\n            <ExpiryDate />\n          </section>\n          <section>\n            <h3>Step5: Verify and Deploy </h3>\n            <VerifyAndDeploy />\n          </section>\n      </div >\n    );\n  }\n}\n\nDeployDoc.contextType = MainContext;\nexport default DeployDoc;\n","import React from \"react\";\nimport { keccak256 } from 'js-sha3';\n\nconst initState =  () => {\n  return {\n    progress: '',\n    hashOutput:'',\n    fileName:''\n  }\n}\n\nclass HashFile extends React.Component {\n  state = {\n    ...initState()\n  }\n  \n  \n  componentDidUpdate = (prevProps) => {\n    //Reset the state hash is manually type or provided through input box.\n    if(prevProps.reset !== this.props.reset) {\n      const {hashOutput, progress} = this.state;\n      if(hashOutput && progress) {\n        this.setState({\n          ...initState()\n        });\n      }\n    }\n  }\n\n  userConsent = (event) => {\n    const { hashOutput } = this.state;\n\n    const file = event.target.files[0];\n\n    if (hashOutput && file) {\n      if (window.confirm('Warning: All entered data will be reset')) {\n        this.handleChange(event);\n      }\n    } else if (!hashOutput) {\n      this.handleChange(event);\n    }\n  }\n\n  handleChange = (event) => {\n    const updaterFunc = this.props.updaterFunc;  \n    let reader = new FileReader();\n    const file = event.target.files[0];\n    \n    if (!file) {\n      return;\n    }\n\n    const batch = 1024 * 1024 * 2;\n    let start = 0;\n    const fileName = file.name;\n    const total = file.size;\n    let current = keccak256;\n    const self = this;\n   \n    let end;\n\n    reader.onload = function (event) {\n      try {\n        current = current.update(event.target.result);\n        asyncUpdate();\n      } catch (e) {\n        console.log('error', e)\n      }\n    };\n\n    var asyncUpdate = function () {\n      if (total === 0) {\n        self.setState({\n          error: `file size needs to be greater than 0 byte`\n        });\n      } else if (start < total && total > 0) {\n        let progressInfo = `hashing...${(start / total * 100).toFixed(2)} %`;\n        self.setState({\n          progress: progressInfo\n        });\n        end = Math.min(start + batch, total);\n        reader.readAsArrayBuffer(file.slice(start, end));\n        start = end;\n      } else {\n        const hashOutput = '0x' + current.hex();\n        self.setState({\n          progress: '100%',\n          hashOutput: hashOutput,\n          fileName: fileName\n        }, () => self.updateContextHashOutput(updaterFunc));\n      }\n    };\n    asyncUpdate();\n  } \n\n  updateContextHashOutput = (updaterFunc) => {\n    const { hashOutput, fileName } = this.state;\n    updaterFunc(hashOutput, fileName);\n  }\n\n  render() {\n    const complete = '100%';\n    const { hashOutput } = this.state;\n    let progress = this.state.progress;\n    let showProgress;\n\n    if (progress && progress !== complete) {\n      showProgress = (\n        <div>\n          <p>Progress: {this.state.progress}</p>\n        </div>\n      );\n    } else if ((progress === complete) && hashOutput) {\n      showProgress = (\n        <div>\n          <p>Progress: {this.state.progress}</p>\n        </div>\n      );\n    } else {\n      progress = null;\n    }\n    \n    return (\n      <div>\n        <form>\n          <label>\n            Select a File:\n          <input type=\"file\" onChange={this.userConsent}\n              onClick={(event) => {\n                event.target.value = null\n              }} />\n          </label>\n        </form>\n        <div>\n          {showProgress}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HashFile;\n","\nfunction isHashValid(address) {\n    const myRe = /^0x[a-fA-F0-9]{64}$/;\n    if (myRe.test(address)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction hasSpace(address) {\n    const myRe = /\\s/g;\n    if (myRe.test(address)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction inputHashValid(inputHash) {\n    //remove any first and last space\n    const hash = inputHash.trim();\n    const prefix = hash.slice(0, 2);\n\n    if (hash.length === 0) return true\n    if (prefix !== \"0x\") return 'address must start with 0x prefix.'\n    if (hasSpace(hash)) return 'address should not contain any space character.'\n    if (hash.length !== 66) return 'address length should be 66 including 0x prefix at the front.'\n    if (!isHashValid(hash)) return 'address should be in correct hex format.'\n\n    return false;\n}\n\n\nexport default inputHashValid;\n","import React from 'react';\nimport HashFile from '../shared/HashFile';\nimport { SignInfoConsumer } from '../context/SignInfoProvider';\nimport { SignInfoContext } from '../context/SignInfoContext';\nimport inputHashValid from '../utils/InputHashValid';\nimport { checkWeb3 } from '../utils/initWeb3';\n\nclass InputAndGetInfo extends React.Component {\n\n    handleClick = async (hashStateKey) => {\n        const currentContext = this.context;\n\n        await checkWeb3(currentContext);\n\n        //loading updated new context context\n        const context = this.context;\n        const { web3, contract, account } = context.loadWeb3;\n\n        if (!web3) {\n            return console.log('MetaMask not detected');\n        }\n\n        const hashOutput = context[hashStateKey];\n        let docData = { ...this.context.docData };\n\n        const errorMsg = `Provided hash:\\n ${hashOutput},\\n is not deployed on this network, try selecting different network or provide different Hash.\n        `\n        const getData = await contract.methods.getDocData(hashOutput).call({\n            from: account\n        });\n\n        if (!getData.signature) {\n            return alert(errorMsg);\n        } else {\n            docData.docHash = getData.docHash;\n            docData.creatorAddress = getData.creatorAddress;\n            docData.expiryDate = getData.expiryDate;\n            docData.creationDate = getData.creationDate;\n            docData.signature = getData.signature;\n            docData.authorisedSigners = getData.authorisedSigners;\n            docData.whoSigned = getData.whoSigned;\n\n            context.updateDocData(docData);\n        }\n    }\n\n    handleChange = (e) => {\n        const context = this.context;\n        const hashValue = e.target.value;\n        //remove excess space from front and back\n        const trimValue = hashValue.trim();\n        const validate = inputHashValid(trimValue);\n        context.updateInputHash(trimValue, validate);\n    }\n\n    render() {\n        return (\n            <div>\n                <SignInfoConsumer>\n                    {({ inputHash, inputHashError, uploadHash, updateUploadHash }) => (\n                        <div>\n                            <section>\n                                <h4><i>Upload Document/File</i></h4>\n                                <HashFile updaterFunc={updateUploadHash} reset={inputHash} />\n\n                                {uploadHash ? (\n                                    <div>\n                                        <p> Hash generated: <strong>{uploadHash}</strong></p>\n                                        <button onClick={() => this.handleClick(\"uploadHash\")}>Get Info</button>\n                                    </div>\n                                ) : (\n                                        null\n                                    )}\n                            </section>\n                            <section>\n                                <h1> OR </h1>\n                                <label>\n                                    <h4><i>Enter Hash Of The Document/File:</i></h4>\n                                    <input type=\"text\" value={inputHash} style={{ width: \"500px\" }} onChange={this.handleChange} />\n                                </label>\n                                <br />\n                                <span style={{ color: \"red\" }}>{\n                                    (inputHashError && inputHashError !== true) ? (\n                                        \"Error : \" + inputHashError\n                                    ) : (\n                                            null\n                                        )\n                                }\n                                </span>\n                                <br />\n                                {(inputHash && !inputHashError) ? (\n                                    <button name=\"inputHash\" onClick={() => this.handleClick(\"inputHash\")}>Get Info</button>\n                                ) : (\n                                        null\n                                    )}\n                            </section>\n                        </div>\n                    )}\n                </SignInfoConsumer>\n                <br />\n            </div>\n        );\n    }\n}\n\nInputAndGetInfo.contextType = SignInfoContext;\nexport default InputAndGetInfo;\n\n","import React from 'react';\nimport moment from 'moment';\n\nexport const RenderDocInfo = (docData) => {\n\n    return (\n        <div>\n            <table>\n                <tbody>\n                    {docData.signature ? (\n                        Object.keys(docData).map((key, index) => {\n                            const loadData = docData[key];\n                            if (key === \"whoSigned\" && loadData.length > 1) {\n                                return (\n                                    <tr key={index.toString()}>\n                                        <td>{key}</td>\n                                        <td>\n                                            <table>\n                                                <tbody>\n                                                    {loadData.map((signer, index) => {\n                                                        return (\n                                                            <tr key={\"ws\" + index.toString()}>\n                                                                <td>{signer}</td>\n                                                            </tr>\n                                                        );\n                                                    })}\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                );\n                            } else if (key === \"whoSigned\" && loadData.length === 0) {\n                                return (\n                                    <tr key={index.toString()}>\n                                        <td> {key} </td>\n                                        <td>No one has signed yet.</td>\n                                    </tr>\n                                );\n                            }\n\n                            if (key === \"authorisedSigners\" && loadData.length > 1) {\n                                return (\n                                    <tr key={index.toString()}>\n                                        <td>{key}</td>\n                                        <td>\n                                            <table>\n                                                <tbody>\n                                                    {loadData.map((signer, index) => {\n                                                        return (\n                                                            <tr key={\"as\" + index.toString()}>\n                                                                <td>{signer}</td>\n                                                            </tr>\n                                                        )\n                                                    })}\n                                                </tbody>\n                                            </table>\n                                        </td>\n                                    </tr>\n                                );\n                            } else if (key === \"authorisedSigners\" && loadData.length === 0) {\n                                return (\n                                    <tr key={index.toString()}>\n                                        <td>{key}</td>\n                                        <td>Any one can sign(Open Document)</td>\n                                    </tr>\n                                )\n                            }\n\n                            if (key === 'expiryDate' || key === 'creationDate') {\n                                const loadDate = docData[key]\n                                let convertDate;\n\n                                /*\n                                If expiry date is not provided or user decided to deploy document \n                                without expiry date, default value 0 is set, which will open the document\n                                for signing indefinitely.\n                                 */\n                                if (key === 'expiryDate' && loadDate.toNumber() === 0) {\n                                    convertDate = `Expiry Date not included.`\n                                } else {\n                                    convertDate = moment.unix(loadDate.toNumber()).format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n                                }\n                                return (\n                                    <tr key={index.toString()}>\n                                        <td >{key}</td>\n                                        <td>{convertDate}</td>\n                                    </tr>\n                                );\n                            }\n\n                            return (\n                                <tr key={index.toString()}>\n                                    <td >{key}</td>\n                                    <td>{docData[key]}</td>\n                                </tr>\n                            );\n                        })\n                    ) : (\n                            null\n                        )\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\n","import React from 'react';\n\nimport InputAndGetInfo from '../shared/InputAndGetInfo';\nimport getSignData from '../utils/getSignData';\n\nimport { SignInfoContext } from '../context/SignInfoContext';\nimport { withRouter } from 'react-router-dom';\nimport { checkWeb3 } from '../utils/initWeb3';\nimport { accessMsg } from '../utils/helper';\nimport { RenderDocInfo } from '../shared/DisplayInfo';\n\nimport moment from 'moment';\n\nclass signDoc extends React.Component {\n\n    componentDidMount = async () => {\n        const { uploadHash, inputHash } = this.context;\n\n        if (uploadHash || inputHash) {\n            this.context.resetState();\n        }\n\n        await checkWeb3(this.context);\n\n        const { web3 } = this.context.loadWeb3;\n\n        if (!web3) {\n            return console.log('MetaMask not detected');\n        }\n    }\n\n    handleClick = async () => {\n        const context = this.context;\n\n        const { web3 } = context.loadWeb3;\n        const { docData, uploadHash, inputHash } = context;\n\n        if (!docData.signature) {\n            return alert(`Could not retrieve deployed document data, try uploading file or enter hash again.`)\n        }\n\n        if (web3 && docData.signature) {\n\n            //Todo\n            //Find simpler method.\n            //web3.eth.getCoinbase method is not suitable, it returns address in lower case format.\n            const allAccounts = await web3.eth.getAccounts();\n            const account = allAccounts[0];\n\n            const currentDate = moment().unix();\n            const expiryDate = docData.expiryDate.toNumber();\n            const diffDate = expiryDate - currentDate;\n\n            if (!account) {\n                return alert('web3 account not detected, try login/install to MetaMask');\n            }\n\n            if (expiryDate > 0 && diffDate < 1) {\n                return alert('Signing time period already expired. This contract is closed for signing.')\n            }\n\n            const authList = docData.authorisedSigners;\n            if (authList.length > 0 && !authList.includes(account)) {\n                return alert(`This account:${account} is not authorised to sign.`)\n            }\n\n            const whoSigned = docData.whoSigned;\n            if (whoSigned.length > 0 && whoSigned.includes(account)) {\n                return alert(`Already signed by this account: ${account}. Multiple signing by same account is not allowed.`)\n            }\n\n            /*Todo:\n                >Need reliable way to detect generated hash on state.\n                >Possibly update the state with hash name and load from it.\n            */\n           let currentHash;\n            if(uploadHash) {\n                currentHash = uploadHash;\n            } else {\n                currentHash = inputHash;\n            }\n\n            const signData = await getSignData(web3, currentHash, account);\n\n            signData.signedAccount = account;\n\n            context.updateSignData(signData);\n        }\n    }\n\n    deployClick = async () => {\n        const { signData } = this.context;\n        const { web3, contract, networkId } = this.context.loadWeb3;\n\n        const allAccounts = await web3.eth.getAccounts();\n        const account = allAccounts[0];\n\n        const { creatorAddress } = this.context.docData;\n        \n        //Todo\n        //Find simpler method.\n        //web3.eth.getCoinbase method is suitable, it returns address in lower case format.\n        if (signData.signedAccount !== account) {\n            return alert(`Account used for signing and deployment should be same.\\n\n            Signed Account: ${signData.signedAccount} \\n\n            Trying to deploy with Account: ${account}`) \n        }\n\n        contract.methods.signTheDoc(\n            creatorAddress,\n            signData.docHash,\n            signData.r,\n            signData.s,\n            signData.v,\n            signData.signature,\n        ).send({ from: account })\n            .on('transactionHash', (hash) => {\n                this.props.history.push({\n                    pathname: '/status',\n                    web3: web3,\n                    hash: hash,\n                    networkId: networkId,\n                    redirect: true\n                });\n            }).catch((error) => {\n                alert(JSON.stringify(error));\n            });\n    }\n\n    render() {\n        const { docData, signData } = this.context;\n\n        let signProcess;\n\n        if (docData.docHash && docData.signature) {\n            signProcess = (\n                <div>\n                    {RenderDocInfo(docData)}\n                    <p>Click sign if above information is correct</p>\n                    <button onClick={this.handleClick}>Sign</button>\n                </div>\n            )\n        } else {\n            signProcess = accessMsg(1)\n        }\n\n        let deploy;\n        if (signData.docHash && signData.signature) {\n            deploy = (\n                <div>\n                    <p>Hash: {signData.docHash}</p>\n                    <p>Signature:{signData.signature}</p>\n                    <p>Click deploy publish the signature</p>\n                    <button onClick={this.deployClick}>Deploy</button>\n                </div>\n            )\n        } else {\n            deploy = accessMsg(2);\n        }\n        return (\n            <div>\n                <section>\n                    <h3>Step 1: Get Document Information</h3>\n                    <InputAndGetInfo />\n                </section>\n\n                <section>\n                    <h3>Step 2: Verify And Sign </h3>\n                    {signProcess}\n                </section>\n\n                <section>\n                    <h3>Step 3: Verify And Deploy </h3>\n                    {deploy}\n                </section>\n            </div>\n        );\n    }\n}\n\nsignDoc.contextType = SignInfoContext;\nexport default withRouter(signDoc);","import React from 'react';\nimport InputAndGetInfo from '../shared/InputAndGetInfo';\nimport { RenderDocInfo } from '../shared/DisplayInfo';\nimport { SignInfoContext } from '../context/SignInfoContext';\nimport { checkWeb3 } from '../utils/initWeb3';\n\nclass DocInfo extends React.Component {\n    componentDidMount = async () => {\n        const { uploadHash, inputHash } = this.context;\n\n        if(uploadHash || inputHash ) {\n            this.context.resetState();\n        }\n\n        await checkWeb3(this.context);\n\n        const { web3 } = this.context.loadWeb3;\n\n        if(!web3) {\n            return console.log('MetaMask not detected');\n        }\n    }\n\n    render() {\n        const { docData } = this.context;\n        let displayInfo;\n        \n        if (docData.docHash && docData.signature) {\n            displayInfo = (\n                <div>\n                    <h4>Deployed Document/File Info:</h4>\n                    {RenderDocInfo(docData)}\n                </div>\n            );\n        } else {\n            displayInfo = null;\n        }\n\n        return (\n            <div>\n                <InputAndGetInfo />\n                {displayInfo}\n            </div>\n        );\n    }\n}\n\nDocInfo.contextType = SignInfoContext;\nexport default DocInfo;\n\n","import React from 'react';\n\nclass Loading extends React.Component {\n    state = {\n        loadingMsg: ''\n    }\n\n    componentDidMount = () => {\n       this.loading= setInterval(() => {\n            let loadingMsg = this.state.loadingMsg;\n            if(!loadingMsg) {\n                loadingMsg = '.';\n            } else if(loadingMsg === '.') {\n                loadingMsg = '..';\n            } else if(loadingMsg === '..') {\n                loadingMsg = '...';\n            } else if(loadingMsg === '...') {\n                loadingMsg = '....'\n            } else {\n                loadingMsg = ''\n            }\n            this.setState( {\n                loadingMsg: loadingMsg})\n         }, 100);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.loading);\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>{this.state.loadingMsg}</h3>\n            </div>\n        )\n    }\n}\n\nexport default Loading;","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport Loading from './Loading';\n\nasync function getTxData(web3, txHash) {\n    const receipt = await web3.eth.getTransactionReceipt(txHash);\n    return receipt;\n}\n\nfunction idToName(id) {\n    const link = 'etherscan.io';\n    if (id === 1) {\n        return link\n    } else if (id === 3) {\n        return 'ropsten.' + link;\n    } else if (id === 4) {\n        return 'rinkeby.' + link;\n    } else if (id === 42) {\n        return 'kovan.' + link;\n    } else {\n        return 'unknown';\n    }\n}\n\nclass Status extends React.Component {\n    state = {\n        hash: '',\n        web3: '',\n        receipt: '',\n        error: '',\n        network: ''\n    }\n\n    componentDidMount = async () => {\n        const getHash = this.props.location.hash;\n        const hash = getHash.slice(1);\n        const web3 = this.props.location.web3;\n        const self = this;\n        let network;\n\n        if (web3) {\n            network = await web3.eth.net.getNetworkType();\n        }\n\n        if (web3 && hash) {\n            this.timer = setInterval(async function () {\n                getTxData(web3, hash).then((result) => {\n                    if (result) {\n                        clearInterval(self.timer);\n                        self.setState({\n                            web3: web3,\n                            hash: hash,\n                            result: result,\n                            network: network\n                        });\n                    }\n                }).catch((error) => {\n                    clearInterval(self.timer);\n                    self.setState({\n                        web3: web3,\n                        hash: hash,\n                        error: error,\n                        network: network\n                    });\n                })\n            }, 1000);\n        }\n    }\n\n    render() {\n        const state = this.state;\n        const result = state.result;\n        const error = state.error;\n        const networkId = this.props.location.networkId;\n        const getHash = this.props.location.hash;\n        const hash = getHash.slice(1);\n        const redirect = this.props.location.redirect;\n        let networkLink;\n\n        var getNetwork = idToName(networkId);\n        let fullLink;\n\n        if (getNetwork && getNetwork !== 'unknown') {\n            fullLink = `https://${getNetwork}/tx/${hash}`;\n            networkLink = (\n                <div>\n                    <h3>Deployed network link</h3>\n                    <a href={fullLink} target='_blank' rel=\"noopener noreferrer\">{fullLink}</a>\n                </div>\n            );\n\n        } else {\n            networkLink = (\n                <div>\n                    <p> Deployed to unknown or private network</p>\n                </div>\n            );\n        }\n\n        let showLoading;\n\n        if (redirect && !result) {\n            showLoading = (\n                <div>\n                    {networkLink}\n                    <p>Waiting for Transaction Receipt from network</p>\n                    <p>Taking too long..click above link to get additional information.</p>\n                    <Loading />\n                </div>\n            );\n        } else if (redirect && result) {\n            showLoading = (\n                <div>\n                    {networkLink}\n                    <p> Deployment successful </p>\n                </div>\n            );\n        } else if (error) {\n            showLoading = (\n                <div>\n                    <h4>Error:</h4>\n                </div>\n            );\n        } else if (!redirect) {\n            showLoading = (\n                <div>\n                    <h4>Please Proceed to Deploy Document first</h4>\n                    <Link to=\"/deploy\" >Deploy Document </Link>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {showLoading}\n                <div>\n                    <table>\n                        <tbody>\n                            {result ? (\n                                \n                                Object.keys(result).map((key, index) => {\n                                    return (\n                                        <tr key={index.toString()}>\n                                            <td>\n                                                {key} : {result[key]}\n                                            </td>\n                                        </tr>\n                                    );\n                                })\n                            ) : (\n                                    null\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Status);\n\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link, NavLink } from \"react-router-dom\";\nimport { MainProvider } from './context/MainProvider';\nimport { SignInfoProvider } from './context/SignInfoProvider';\nimport './Main.css'\n\n// COMPONENTS\nimport DeployDoc from './deployDoc/DeployDoc';\nimport signDoc from './signDoc/SignDoc';\nimport DocInfo from './docInfo/DocInfo';\nimport Status from './deployDoc/Status';\n\nfunction Home() {\n    return (\n        <div>\n            <br />\n            <p>Main Concept:</p>\n            <p>Deploy Hash of the document/file and let anyone or authroized users to sign the hash of the document thus completing document signature process.</p>\n\n            <br />\n            <p>Do you want to  </p>\n            <ul >\n                <li><Link to=\"/deploy\">Create And Deploy Document?</Link></li>\n                <li><Link to=\"/sign\">Sign Document?</Link></li>\n                <li><Link to=\"/info\">Get Document Info?</Link></li>\n            </ul>\n        </div>\n    );\n}\n\nconst HomeApp = () => {\n    return (\n        <Router>\n            <MainProvider>\n                <SignInfoProvider>\n            <div>\n                <header>\n                    <h4 className=\"LogoMargin\">SignTheDoc</h4>\n                    <ul className=\"NavMenu\" >\n                        <li><NavLink className=\"MainLinks\" to=\"/\" exact activeClassName=\"ActiveLink\" >Home |</NavLink></li>\n                        <li><NavLink className=\"MainLinks\" to=\"/deploy\" activeClassName=\"ActiveLink\">Deploy Document |</NavLink></li>\n                        <li><NavLink className=\"MainLinks\" to=\"/sign\" activeClassName=\"ActiveLink\">Sign Document |</NavLink> </li>\n                        <li><NavLink className=\"MainLinks\" to=\"/info\" activeClassName=\"ActiveLink\">Get Document Info |</NavLink> </li>\n                    </ul>\n                </header>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/deploy\" component={DeployDoc} />\n                <Route path=\"/sign\" component={signDoc} />\n                <Route path=\"/info\" component={DocInfo} />\n                <Route path=\"/status\" component={Status} />\n                <br />\n            </div>\n                </SignInfoProvider>\n            </MainProvider>\n        </Router>\n    );\n}\n\nexport default HomeApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport HomeApp from './HomeApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div>\n    <HomeApp/>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}